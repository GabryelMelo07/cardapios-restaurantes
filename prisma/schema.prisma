// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id                String       @id @default(uuid())
  email             String       @unique
  name              String
  password          String
  phone             String?
  active            Boolean      @default(true)
  createdAt         DateTime     @default(now()) @map("created_at")
  updatedAt         DateTime     @updatedAt @map("updated_at")
  restaurants       Restaurant[] @relation("OwnerRestaurants")
  sharedRestaurants Restaurant[] @relation("SharedRestaurants")

  @@map("users")
}

model Restaurant {
  id           Int    @id @default(autoincrement())
  name         String
  location     String
  openingHours String @map("opening_hours")
  description  String
  userId       String @map("user_id")
  owner        User   @relation("OwnerRestaurants", fields: [userId], references: [id])
  sharedWith   User[] @relation("SharedRestaurants")
  menu         Menu?

  @@map("restaurants")
}

model Menu {
  id           Int        @id @default(autoincrement())
  restaurantId Int        @unique @map("restaurant_id")
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  categories   Category[]

  @@map("menus")
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  menuId   Int       @map("menu_id")
  menu     Menu      @relation(fields: [menuId], references: [id])
  products Product[]

  @@map("categories")
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  price       Float
  image       String?
  categoryId  Int      @map("category_id")
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@map("products")
}

model Logs {
  id          Int      @id @default(autoincrement())
  action      String
  description String
  date        DateTime @default(now())
  userId      String   @map("user_id")
  method      String
  path        String
}
